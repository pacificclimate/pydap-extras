name: Python CI

on: push

jobs:
  test:

    runs-on: ubuntu-20.04
    container: pcic/geospatial-python:3.2.0
#    strategy:
#      matrix:
#        python-version: [3.7, 3.8]

    steps:
#    - uses: actions/checkout@v2
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v2
#      with:
#        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        # Add postgres package repo; see https://wiki.postgresql.org/wiki/Apt
        echo "### Add postgres package repo"
        apt-get install curl ca-certificates gnupg
        curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
        sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
        apt-get update
        
        # Install PostGIS
        echo "### Install PostGIS"
        apt-get install postgresql-14-postgis-3
        
        # Install plpython3
        echo "### Install plpython3"
        apt-get install postgresql-plpython3-14
        
        # TODO: Remove
        # Install other deps
#        apt-get install libhdf5-dev libgdal-dev libnetcdf-dev

    - name: Install pipenv
      run: |
        # Pin version?
        pip install -U pipenv

      # TODO: Consider removing the caching. I'm not sure it does us much good.
#    - id: cache-pipenv
#      uses: actions/cache@v2
#      with:
#        path: ~/.local/share/virtualenvs
#        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

    # Both of the installation steps below set up the `GDAL` package.
    # Unfortunately, this package is very fussy in Github Actions 
    # (particularly for `pydap-extras`) and as a result we have to do 
    # some funky stuff to make it happy. This comment will describe 
    # each installation step to give some more context to the next 
    # author.
    # 
    # 1. Installing from the `Pipfile` + setup.py
    #    The first two steps are fairly normal, we run a regular "dev"
    #    installation and then separately install from `setup.py`. A 
    #    `-e .` is NOT required for local to run the tests locally but
    #    strangely is required for actions.
    #
    # 2. Uninstalling `numpy` & `GDAL`
    #    These packages are required and should maintain their place 
    #    in the `Pipfile`, however there is no way to ensure their 
    #    installation order. To ensure `numpy` is installed first, we 
    #    remove both packages from the environment.
    #
    # 3. Installing `numpy`
    #    Re-install `numpy` using `pip` through `pipenv` to prevent the 
    #    lengthy "locking" process from slowing down the workflow.
    #
    # 4. Installing `GDAL`
    #    Like `numpy` we want to re-install `GDAL`. Here we are 
    #    ensuring the version matches the version on the OS.
    #
    #
    # RG: This still doesn't work: This script is failing because GDAL wants
    # numpy, but GDAL is installed first. The explanation above seems
    # to have a logical flaw in it -- namely that numpy and GDAL are installed
    # in arbitrary order -- but that numpy must be installed first. (The reason
    # for this, I infer from the recent errors, is that GDAL install will fail
    # without numpy.) So the pipenv install can fail, and no subsequent actions
    # can fix it.
    #
    # However, we can pre-install numpy in the venv before we do the
    # pipenv install. And it looks from experimentation as if pipenv will
    # create a venv on any first command, not just on pipenv install.
    - name: Install dependencies if changed
#      if: steps.cache-pipenv.outputs.cache-hit != 'true' && ${{ matrix.python-version == '3.8' }}
      run: |
        # Pre-install numpy
        pipenv run pip install numpy
        pipenv install --dev
        pipenv install -e .
        # I think the rest can be eliminated, but let's see what happens first
        pipenv uninstall numpy GDAL
        pipenv run pip install numpy
        pipenv run pip install GDAL==$(gdal-config --version)

#    - name: Re-install dependencies if alternative python version
#      if: ${{ matrix.python-version != '3.8' }}
#      run: |
#        mv Pipfile.lock do-not-use
#        pipenv install --python ${{ matrix.python-version }} --dev
#        pipenv install -e .
#        pipenv uninstall numpy GDAL
#        pipenv run pip install numpy
#        pipenv run pip install GDAL==$(gdal-config --version)
        
    - name: Test with pytest (full)
      if: github.ref == 'refs/heads/master'
      env:
        TZ: Canada/Pacific
      run: |
        pipenv run pytest -m "not online" -v --tb=short --cov

    - name: Test with pytest (fast)
      if: github.ref != 'refs/heads/master'
      env:
        TZ: Canada/Pacific
      run: |
        pipenv run pytest -m "not slow and not online" -v --tb=short

    - name: Code format check
      if: ${{ matrix.python-version == '3.8' }}
      run: poetry run black . --check
