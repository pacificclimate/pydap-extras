name: Python CI

on: push

jobs:
  test:

    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        echo "## add legacy repo"
        sudo apt-get install -y curl ca-certificates gnupg
        sudo curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        sudo echo 'deb http://apt.postgresql.org/pub/repos/apt focal-pgdg main' | sudo tee /etc/apt/sources.list.d/pgdg.list
        echo "## update"
        sudo apt-get update
        echo "## list installed postgres"
        apt list --installed | grep postgresql
        echo "## purge postgresql support"
        sudo apt purge postgresql-client-13 postgresql-server-dev-all
        echo "## install postgresql extensions"
        sudo apt-get install postgresql-plpython3-12 postgresql-12-postgis-3
        echo "## install others"
        sudo apt-get install libhdf5-dev libgdal-dev libnetcdf-dev

    - name: Install pipenv
      run: |
        pip install -U pip
        # Later versions of setuptools do not support use_2to3, which the 
        # current version of GDAL requires. See 
        #   https://github.com/nextgis/pygdal/issues/67
        #   https://github.com/pypa/setuptools/issues/2781
        #   https://github.com/OSGeo/gdal/issues/7541
        #   etc.
        python3 -m pip install --upgrade --no-cache-dir "setuptools<58"
        pip install -U pipenv

    # TODO: Evaluate if this caching delivers value. It makes things complicated.
    - id: cache-pipenv
      uses: actions/cache@v2
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

    # Both of the installation steps below set up the `GDAL` package.
    # Unfortunately, this package is very fussy in Github Actions 
    # (particularly for `pydap-extras`) and as a result we have to do 
    # some funky stuff to make it happy. This comment will describe 
    # each installation step to give some more context to the next 
    # author.
    # 
    # 1. Installing from the `Pipfile` + setup.py
    #    The first two steps are fairly normal, we run a regular "dev"
    #    installation and then separately install from `setup.py`. A 
    #    `-e .` is NOT required for local to run the tests locally but
    #    strangely is required for actions.
    #
    # 2. Uninstalling `numpy` & `GDAL`
    #    These packages are required and should maintain their place 
    #    in the `Pipfile`, however there is no way to ensure their 
    #    installation order. To ensure `numpy` is installed first, we 
    #    remove both packages from the environment.
    #
    # 3. Installing `numpy`
    #    Re-install `numpy` using `pip` through `pipenv` to prevent the 
    #    lengthy "locking" process from slowing down the workflow.
    #
    # 4. Installing `GDAL`
    #    Like `numpy` we want to re-install `GDAL`. Here we are 
    #    ensuring the version matches the version on the OS.
    #
    # Addendum: The above doesn't actually work: This script fails because GDAL
    # wants numpy, but GDAL is installed first. The explanation above states
    # that numpy and GDAL are installed in arbitrary order, and that numpy must
    # be installed first. That can't be corrected after the fact, and the whole
    # step necessarily fails.
    #
    # However, we can pre-install numpy in the venv before we do the
    # pipenv install. And it looks from experimentation as if pipenv will
    # create a venv on any first command, not just on pipenv install.
    - name: Install dependencies if changed
      if: steps.cache-pipenv.outputs.cache-hit != 'true' && ${{ matrix.python-version == '3.8' }}
      run: |
        # Pre-install numpy
        pipenv run pip install numpy
        # Install remaining Python deps from Pipfile
        pipenv install --dev
        pipenv install -e .
        # TODO: Remove
        #pipenv uninstall numpy GDAL
        #pipenv run pip install numpy
        #pipenv run pip install GDAL==$(gdal-config --version)

    - name: Re-install dependencies if alternative python version
      if: ${{ matrix.python-version != '3.8' }}
      run: |
        mv Pipfile.lock do-not-use
        # Pre-install numpy
        pipenv run pip install numpy
        # Install remaining Python deps from Pipfile
        pipenv install --python ${{ matrix.python-version }} --dev
        pipenv install -e .
        # TODO: Remove
        #pipenv uninstall numpy GDAL
        #pipenv run pip install numpy
        #pipenv run pip install GDAL==$(gdal-config --version)
        
    - name: Test with pytest (full)
      if: github.ref == 'refs/heads/master'
      env:
        TZ: Canada/Pacific
      run: |
        pipenv run pytest -m "not online" -v --tb=short --cov

    - name: Test with pytest (fast)
      if: github.ref != 'refs/heads/master'
      env:
        TZ: Canada/Pacific
      run: |
        pipenv run pytest -m "not slow and not online" -v --tb=short
