name: Python CI

on: push

jobs:
  test:

    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version:
          - "3.8"
#          - "3.9"
#          - "3.10"

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        echo "## add legacy repo"
        sudo apt-get install -y curl ca-certificates gnupg
        sudo curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        sudo echo 'deb http://apt.postgresql.org/pub/repos/apt focal-pgdg main' | sudo tee /etc/apt/sources.list.d/pgdg.list
        echo "## update"
        sudo apt-get update
        echo "## list installed postgres"
        apt list --installed | grep postgresql
        echo "## purge postgresql support"
        sudo apt purge postgresql-client-13 postgresql-server-dev-all
        echo "## install postgresql extensions"
        sudo apt-get install postgresql-plpython3-12 postgresql-12-postgis-3
        echo "## install others"
        sudo apt-get install libhdf5-dev libgdal-dev libnetcdf-dev

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    # Installing this project is tricky, due to its dependency on GDAL.
    # For an explanation, see the README.
    - name: Install project
      run: |
        # Pre-install initial packages (numpy, setuptools) 
        poetry install --only initial
        # Install gdal using pip3 into the Poetry virtualenv
        poetry run pip3 install gdal==3.0.4
        # Install rest of project
        poetry install

    - name: Test with pytest (full)
      if: github.ref == 'refs/heads/master'
      env:
        TZ: Canada/Pacific
      run: |
        pipenv run pytest -m "not online" -v --tb=short --cov

    - name: Test with pytest (fast)
      if: github.ref != 'refs/heads/master'
      env:
        TZ: Canada/Pacific
      run: |
        pipenv run pytest -m "not slow and not online" -v --tb=short
